Array - index + data[index]
기본 원리는 C/C++과 비슷

배열 사용법
int i[] = new int[10];

배열의 생성
1. 배열에 대한 레퍼런스 변수 선언
2. 배열 생성 - 배열의 저장 공간 할당

1) int intArray [];
배열 타입 / 배열에 대한 레퍼런스 변수 / 배열 선언

2) intArray = new int [5];
배열에 대한 레퍼런스 변수 / 배열 생성 / 타입 / 원소 개수

1) intArray *
2) intArray *-> intArray[0]
				intArray[1]
				intArray[2]
				intArray[3]
				intArray[4]
				
				
* 배열 선언 시 크기를 지정하면 컴파일에러
-> int intArray[10]; -> compile error

- 배열의 초기화
int intArray[] = {4, 3, 2, 1, 0};
double doubleArray[] = {0.01, 0.02, 0.03, 0.04};

index 범위 -> 0 ~ 크기-1

생성되지 앟ㄴ은 배열 사용 불가 -> 컴파일 에러 or 런타임 에러

레퍼런스 치환, 배열 공유
-> int intArray[] = new int[5];
-> int myArray[] = intArray;	// 레퍼런스 치환 -> myArray는 intArray와 동일한 배열을 참조한다.

처음에 배열을 선언하는건 일종의 포인터 역할 -> 포인터는 주소를 가리키는 역할 -> 어떤 주소를 참조하는 변수는 여러개여도 상관없음

intArray[1] = 2;
myArray[1] = 6;

-> intArray[1] = 6

 배열은 객체 -> 앞선 내용과 length필드가 존재 -> 길이가 저장됨
 int intArray[] = new int[5];
 int size = intArray.length;
 
 
 
 - for-each 문
 -> 기존의 for문을 변형하여, 배열이나 나열(enumeration)의 크기만큼 루프를 돌면서 각 원소를 순차적으로 접근하는 for문
 (advanced for)
 
 for (변수 : 배열레퍼런스) {
 	//
 }
 
int [] n = {1,2,3,4,5};
int sum=0;
for(int k : n) {	// n.length번 반복, k = n[0], n[1], ..., n[4]
	sum += k;
}
System.out.println("합은 " + sum);

enum Week {월, 화, 수, 목, 금, 토, 일};
for(Week day : Week.values())
	System.out.print(day + "요일");
	
-> 배열과 나열 타입에서 사용 가능


- 2차원 배열
int intArray[][];
double doubleArray[][];
char charArray[][];

intArray = new int[2][5];
doubleArray = new double[5][5];
charArray = new char[5][2];


행(Row)    -
열(Column) |
 
2차원 배열의 length

int i[][] = new int[2][5];

i.length	// 2, 2차원 배열의 행의 개수
i[0].length	// 5, 0번 행의 열의 개수 
i[1].length // 5, 1번 행의 열의 개수

int intArray[][] = {{0,1,2}, {4,5,6}, {8,9}};


- 비정방형 배열: 행마다 열의 개수가 서로 다른 배열

int i[][] = new int[4][4];

i *-> *-> | i[0][0] |    |    | i[0][3]
	  *-> |         |    |    |
	  *-> |         |    |    |
	  *-> | i[3][0] |    |    | i[3][3]
	  
int i[][] = new int[4][];	// length: 4개의 행: 4
i[0] = new int[1];	// length: 0번 행의 열: 1
i[1] = new int[2];	// length: 2
i[2] = new int[3];	// length: 3
i[3] = new int[4];	// length: 4


int intArray[][] = {{0}, {1,2}, {3,4,5}, {6,7,8,9}};

- 메소드에서 배열 리턴
-> 배열에 대한 레퍼런스가 리턴됨

-> int[] = makeArray() {
	int temp[] = new int[4];
	return temp;
}

int [] intArray;
intArray = makeArray();


2차원 배열 리턴
int [][] make2DArray(){
	return new int[3][4];
}
int [][] int2Array = make2DArray();


 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 