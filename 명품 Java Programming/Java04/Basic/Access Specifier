접근 지정자
-> 캡슐화 -> 객체에 다른 객체가 접근하는 것으로 허용 or 접근 불가능 등등 설정

패키지(Package): 자바는 서로 관련 있는 클래스 파일들을 패키지에 저장
-> 디렉토리 혹은 폴더와 같은 개념

자바 응용 프로그램[ 패키지A[클래스1, 클래스2, 클래스 3], 패키지B[클래스 a, 클래스 b, 클래스 c], 패키지C[c1, c2, c3] ]

접근 지정자(Access Specifier): 4가지
- private
- protected
- public
- 접근 지정자 생략(default)

-> 캡슐화의 원칙을 최대한 살리기 위해, 접근 범위를 최소로 줄이는 것이 중요하다.
-> public은 특별한 경우가 아니면 지양하고, private으로 선언
-> 대신 public 메소드를 통해 private 필드를 조작
-> 굳이 공개될 필요가 없는 메소드도 public을 안쓰는게 권장

클래스 접근 지정
- public 클래스: 패키지에 상관없이, 다른 어떤 클래스에게도 사용이 허용[패키지 P, 패키지 Q를 오갈 수 있다.]
- 디폴트 클래스: 같은 패키지 내의 클래스에게만 사용이 허용[패키지 P, 패키지 Q를 넘나들 수 없다.]

Package P				|						Package Q
						|
class A {				|	public class B {	class C {				class D {
	void f() {			|		...					void g() {				void h() {
		B b = new B();	|	}							B b = new B();			C c = new C();
		C c = new C();	|							}						}
	}					|						}						}
}						|

class A에서 패키지 Q의 클래스 B에 접근하는 것은 허용된다.
하지만, 클래스 C에 접근하는 것은 허용되지 않는다.(디폴트 클래스)

클래스 C와 D에서는 각각 B, C를 호출할 수 있다.(디폴트 클래스)


멤버 접근 지정
private -> default -> protected -> public 순으로 공개의 범위가 넓어진다.

  멤버에 접근하는	|							멤버의 접근 지정						|					
     클래스		|  private	|  디폴트 접근 지정	 |      protected	 	|  public 	|
---------------------------------------------------------------------------------
같은 패키지의 클래스 | 	  x   	|		o		 |	        o	 		|	  o		|
다른 패키지의 클래스 | 	  x   	|		x		 |	        x	 	  	|	  o		|
  접근 가능 영역   	|  클래스 내	|	동일 패키지 내	 |  동일 패키지, 자식 클래스 	| 모든 클래스	|  			
---------------------------------------------------------------------------------

- public 멤버: 패키지에 관계 없이 모든 클래스들이 접근 가능
- private 멤버: 비공개
- protected 멤버: 같은 패키지의 모든 클래스, 다른 패키지의 자식 클래스에서만 접근 가능
- default or package-private: 동일한 패키지에서만 접근 가능 













