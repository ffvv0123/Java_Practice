클래스
-> 객체를 만들어 내기 위한 설계도 -> 클래스 모양 그대로 생성된 실체는 객체
-> 객체는 클래스의 인스턴스(instance)

붕어빵 기계, 붕어빵 : 클래스, 객체
-> 하나의 클래스에서 수없이 다양한 객체들이 생성될 수 있음
 
클래스 구성
- 접근 권한, 클래스 선언, 클래스 이름, 필드(변수), 메소드

public class Circle { 접근 권한 / 클래스 선언 / 클래스 이름
	public int radius;	// 원의 반지름 필드
	public String name;	// 원의 이름 필드

	public Circle() {	// 원의 생성자 메소드
	}
	
	public double getArea(){	// 원의 면적 계산 메소드
		return 3.14 * radius * radius;
	}
}

- 클래스 선언, class Circle
-> 이름이 Circle인 클래스를 선언한다.
-> 캡슐화 원칙에 따라 클래스 외부에는 어떠한 필드나 메소드를 둘 수 없다!

- 필드와 메소드
-> 필드: 객체 내에 값을 저장할 멤버 변수
-> 메소드: 객체의 행동을 구현하는 함수

- 접근 지정자(Access Specifier)
-> public -> 다른 클래스에서 활용하거나 접근할 수 있음
-> 생략하면 디폴트 접근

- 생성자(Constructor)
-> 클래스 이름과 동일한 메소드, 객체가 생성될 때 자동으로 호출


- new 연산자와 개게 생성, 그리고 레퍼런스 변수

public static void main(String[] args) {
	Circle pizza;			// Circle 객체에 대한 레퍼런스 변수 pizza 선언		
	pizza = new Circle();	// Circle 객체 생성
	
	pizza.radius = 10;		// radius 필드에 10 저장
	pizza.name = "자바피자";	// name 필드에 값 저장
	double area = pizza.getArea();	// pizza 객체의 면적 알아내기 
}

- 레퍼런스 변수 선언
-> 객체를 생성하기 전, 객체를 가리킬 레퍼런스 변수를 먼저 선언한다.(자바 국룰: 레퍼런스 선언 -> 객체 생성)
-> 객체가 생성된 것이 아니고, 레퍼런스 변수 = null로 초기화 된 것.

- 객체 생성 -> new 생성자 사용 

new 연산자에 의해 객체가 생성되는 과정
-> Circle 타입 크기의 메모리 할당
-> Circle() 생성자 코드 실행

- 객체 멤버 접근
-> . 연산자 사용 -> 레퍼런스 변수 뒤에 .을 붙






















