static 멤버: 객체를 생성하지 않아도 사용할 수 있는 멤버
- 클래스당 하나만 생성되는 멤버 -> 동일한 클래스의 모든 객체들이 공유한다.
- main 메소드가 실행되기 전에 이미 생성된다.
- static 멤버가 포함된 객체를 생성하기 전에 사용할 수 있다.
- 클래스당 하나 -> 클래스 멤버


non-static 멤버: 객체가 생길 때 객체마다 생성, 다른 객체와 공유하지 않는다.
- 객체가 사라지면 non-static 멤버도 사라지고 접근할 수 없다. 
- 개체마다 하나 -> 인스턴스 멤버

------------|-----non-static member-----|---------static member---------- 
    		| class Sample {			| class Sample {				|
	선 언		| 	int n;					| 	static int m;				|
			|	void g() {...}			|	static void f() {...}		|
			| }							| }								|
------------|---------------------------|-------------------------------|
  			|							|멤버는 클래스당 하나 생성				|
	공간적	|멤버는 객체마다 별도 존재			|- 멤버는 객체 내부가 아닌 별도의 공간	|
	특 성		|- 인스턴스 멤버라고 부름			|(클래스 코드가 적재되는 메모리)에 생성	|
			|							|- 클래스 멤버라고 부름				|									
------------|---------------------------|-------------------------------|
  			|객체 생성 시에 멤버 생성됨		|클래스 로딩 시에 멤버 생성			|
	시간적	|- 객체가 생길 때 멤버도 생성		|- 객체가 생기기 전에 이미 생성		|
			|- 객체 생성 후 멤버 사용 가능		|- 객체가 생기기 전에도 사용 가능		|	
	특 성 	|- 객체가 사라지면 멤버도 사라짐	|- 객체가 사라져도 멤버는 사라지지 않음	|
			|							|- 멤버는 프로그램이 종료될 때 사라짐	|	
------------|---------------------------|-------------------------------|
    공유의	|공유되지 않음					|동일한 클래스의 모든 객체들에 의해 공유됨	|
	특 성		|- 멤버는 객체 내에 각각 공간 유지	|								|
------------|---------------------------|-------------------------------|																																					

class StaticSample {
	public int n;
	public void g();
	public void h();
	public static int m;
	public static void f();
	...
}

- static 멤버의 생성: StaticSample 클래스가 로딩되는 시점
-> 이 순간부터 m과 f()는 존재하며, 사용 가능하다.
-> 객체 s1, s2가 생성된다면, 이때부터 인스턴트 멤버인 n, g(), h()가 사용가능하다.

- 접근법은 동일
- 객체 s1, s2에서 static 멤버 m, f()를 공유한다.

- static 멤버는 클래스당 하나 -> 클래스 이름으로 바로 접근 가능
클래스명.static멤버 => StaticSample.m = 10;
s1.f(); == StaticSample.f();

- non-static이면 오류다!


- 일반적인 경우, static 멤버가 포함된 클래스가 로딩될 때 static 멤버의 메모리가 할당
- 메모리가 풍부한 환경 -> JVM이 처음부터 대부분의 클래스를 로딩 -> JVM이 시작되는 시점이 static멤버가 생성되는 시점이라고 봐도 됨

- 전역 변수
-> Java는 캡슐화 원칙이 강력하다. C++과 달리 전역변수(global variable)를 사용하지 않는다.
-> static을 이용해서 비슷하게 만들 수 있다.

Ex | java.lang.Math

public class Math {
	public static int abs(int a);
	public static double cos(double a);
	public static int max(int a, int b);
	public static double random();
	...
}

- 응용프로그램에서 Math의 멤버들을 사용하기 위해 다음과 같이 하지 않는다.
Math m = new Math();
int n = m.abs(-5);

int n = Math.abs(-5);	// static 멤버를 직접 호출한다.


static method의 제약 조건
- static 메소드는 static 멤버만 접근할 수 있다.
-> 객체 없이도 존재하는 static 메소드는 객체와 함께 생성되는 non-static 멤버를 사용할 수 없다.
-> non-static 메소드는 static 멤버를 사용할 수 있다.

- static 메소드는 this를 사용할 수 없다.

class StaticAndThis {
	int n;
	void f1(int x) { n = x; }
	void f2(int x) { m = x; }
	
	static int m;
	static void s1(int x) { n = x; }	// compile error, "n" non-static field
	static void s2(int x) { f1(3); }	// compile error, "f1()" non-static method
	
	static void s3(int x) { m = x; }	// static method can use static field
	static void s4(itn x) { s3(3); }	// static method can use static method
	
	void f01(int x) { this.n = x; }
	void f02(int x) { this.m = x; }		
	static void s01(int x) { this.n = x; }	// compile error, static method cannot use this method
	static void s02(int x) { this.m = x; }	// compile error, static method cannot use this method
} 

















	