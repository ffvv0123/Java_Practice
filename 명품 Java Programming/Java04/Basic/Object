객체의 소멸
- new에 의해 생성된 객체 공간을 JVM에 돌려주어 가용 메몰(available memory)에 포함시키는 것
C++: 소멸자(destructor), delete 연산자가 이와 같은 역할을 수행
-> 자바는 그딴거 없다. 알아서 처리된다. ㅅㅅ
-> 사용되지 않게 된 객체 메모리: 가비지(garbage) -> 가비지 컬렉터(garbage collector)에 의해 자동으로 반환

가비지(garbage)

a = new Person("이몽룡");
b = new Person("성춘향");

b = a;

=> 레퍼런스 b는 a를 가리키게 되고, b가 가리키던 객체는 어디에서도 참조되지 않으므로, 접근할 수 없다
-> 남아버린 객체가 가비지가 된다.

가비지 컬렉션(garbage collection)
- 가비지가 회수되지 않으면, 할당가능한 가용 메모리가 줄어들고, 0이 되면 프로그램이 실행될 수 없다.
-> 가용 메모리가 일정 수준 이하로 떨어지면 가비지를 회수하여 가용 메모리를 늘린다. -> 가비지 컬렉션
-> 가비지 컬렉션은 자바 플랫폼에 의해 준비된 가비지 컬렉션 스레드(garbage collection thread)에 의해 처리

-> 이게 실행되면 일시적으로 프로그램이 중단되는 경험 -> 프로그램을 멈추고 가비지 컬렉션을 마무리하고 재개되기 때문
-> 실시간 처리에 있어서 큰 약점이 된다.


강제적인 가비지 컬렉션 요청
System 또는 Runtime 객체의 gc() 메소드를 호출하면 가비지 컬렉션이 요청된다.
System.gc(); -> 가비지 컬렉션을 요청!, 실행이 아니다!!

실행은 오로지 자바 플랫폼이 결정함


