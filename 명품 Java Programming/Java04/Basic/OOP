객체 -> 자신만의 고유한 특성과 행동을 지닌다. (State, Behavior)

객체 지향 언어(OOP)
- 캡슐화(Encapsulation)
-> 객체를 캡슐로 싸서 내부를 보호하고 볼 수 없게 하는 것, 객체의 본질적 특성
-> 외부와의 접속을 위한 일부 기능은 공개 노출됨

Java -> 객체는 class라는 캡슐을 사용
-> 필드(멤버 변수), 메소드(멤버 함수)로 구성

- 상속(Inheritance) 
-> 상위 개체의 속성이 하위 객체에 물려져서, 하위 객체가 상위 객체의 속성을 모두 가지는 것

Java -> 자식 클래스가 부모 클래스의 속성을 물려받고 기능을 추가하여 확장(extend)하는 개념
부모 클래스: 슈퍼 클래스(Super class)
자식 클래스: 서브 클래스(Sub class)

-> 코드 재사용 -> 시간절약과 효율성이 높아짐

- 다형성(Polymorphism)
-> 같은 이름의 메소드가 클래스 혹은 객체에 따라 다르게 동작하도록 구현하는 것

1. 강아지, 고양이, 닭 클래스에 소리를 내는 speak() 메소드를 각각 다르게 구현
2. 슈퍼 클래스에 speak 메소드 구현 -> 서브 클래스에 강아지, 고양이, 닭으로 설정
-> 자식의 특성에 맞게 재구현하는 방법(메소드 오버라이딩; method overriding)

클래스 내에서 이름이 같지만, 서로 다르게 동작하는 메소드를 여러개 만드는 메소드 오버로딩(method overloading)

객체 지향 언어(Object Oriented Language; OOL)
절차 지향 언어(Structured Procedural Programming Language; SPPL) 